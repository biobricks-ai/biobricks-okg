## DO NOT EDIT DIRECTLY
##
## Generated from <db-fuseki/fuseki_config.ttl.tt2>.
##
## Basic Fuseki configuration file for HDT files.
##
## Remember that you need hdt-java.jar and hdt-jena.jar when you launch Fuseki.
##
[%#-
# View docs for template:

  perldoc fuseki_config.ttl.tt2

=head1 NOTE

Surround the following directives in the examples with the tags (default: C<< [E<0x25> >> and
C<< E<0x25>] >>):

To comment out a directive, use

C<< [E<0x25># ... E<0x25>] >>

=cut

-%]

@prefix :        <#> .
@prefix fuseki:  <http://jena.apache.org/fuseki#> .
@prefix rdf:     <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:   <http://www.w3.org/2000/01/rdf-schema#> .
@prefix tdb:     <http://jena.hpl.hp.com/2008/tdb#> .
@prefix ja:      <http://jena.hpl.hp.com/2005/11/Assembler#> .
@prefix hdt:      <http://www.rdfhdt.org/fuseki#> .

[] rdf:type fuseki:Server ;
   # Timeout - server-wide default: milliseconds.
   # Format 1: "1000" -- 1 second timeout
   # Format 2: "10000,60000" -- 10s timeout to first result, then 60s timeout for the rest of query.
   # See java doc for ARQ.queryTimeout
   # ja:context [ ja:cxtName "arq:queryTimeout" ;  ja:cxtValue "10000" ] ;

   # IMPORTANT: Import the HDT Assembler
   ja:loadClass "org.rdfhdt.hdtjena.HDTGraphAssembler" ;

   fuseki:services (
     <#service1>
   ) .

# HDT Classes
hdt:HDTGraph rdfs:subClassOf ja:Graph .

## ---------------------------------------------------------------
## Create a Read-Only Dataset composed by many RDF Graphs, each from an HDT File.

<#service1> rdf:type fuseki:Service ;
    fuseki:name                     "hdtservice" ;
    fuseki:serviceQuery             "query" ;
    fuseki:serviceReadGraphStore    "get" ;
    fuseki:dataset                   <#dataset> ;
    .

<#dataset> rdf:type ja:RDFDataset ;
    rdfs:label "Dataset" ;

[%- USE yaml = YAML;
    config = yaml.undumpfile('graphs.yaml');

    # Process each graph from the config
    FOREACH name IN config.graphs.keys.sort;
        graph = config.graphs.$name;
        NEXT IF graph.enabled.defined && !graph.enabled;

        # Get Fuseki settings
        nameFilter = graph.fuseki.defined && graph.fuseki.nameFilter.defined
            ? graph.fuseki.nameFilter
            : config.settings.fuseki.defaultNameFilter;

        keepInMemory_nameFilter = graph.fuseki.defined && graph.fuseki.keepInMemory_nameFilter.defined
            ? graph.fuseki.keepInMemory_nameFilter
            : config.settings.fuseki.defaultKeepInMemory_nameFilter;
-%]
[% FOREACH src IN graph.source;
        NEXT IF !src.exists('path');  # Skip non-path sources (e.g. URLs)
%]
[% IF loop.first -%]
    # [% graph.name %] {{{
[% END -%]
[%-
        USE dir = Directory(src.path);
        # Use hdtgraph block for both single files and directories
        INCLUDE hdtgraph
            graphName = graph.iri
            dir = dir
            nameFilter = nameFilter
            keepInMemory_nameFilter = keepInMemory_nameFilter
        FILTER indent(4)
-%]
    [% IF loop.last %]
    # }}}
    [% END -%]
[%    END; -%]
[% END -%]

    .

[% BLOCK hdtgraph # {{{
-%]
[%#- hdtgraph docs {{{

=head1 BLOCK hdtgraph

=head2 SYNOPSIS

  USE hgnc_path = Directory('data-source/hgnc-kg')
  INCLUDE hdtgraph graphName="https://www.genenames.org/" dir=hgnc_path FILTER indent(4)

=head2 DESCRIPTION

Generate C<ja:namedGraph> predicate-object pairs that reference C<.hdt> files
from a directory recursively.

=head2 PARAMETERS

=head3 C<graphName>

Type: String

[B<Required>]

The base IRI that is used for the named graph. The parameter C<< ?file= >> and
HDT filename is appended to this to create the final IRI for the named graph.

=head3 C<dir>

Type: C<Directory>

[B<Required>]

The top-level path used for processing files recursively.

See L<Template::Plugin::Directory>.

=head3 C<nameFilter>

Type: C<Regexp>

Filter that adds a graph for any matching files.

Default: Matches all C<.hdt> files.

=head3 C<keepInMemory_nameFilter>

Type: C<Regexp>

Filter that enables C<hdt:keepInMemory> for any matching file names.

Default: Does not match any C<.hdt> files.

=cut

}}}
%]
[%- DEFAULT
    nameFilter='(*ACCEPT)'
    keepInMemory_nameFilter='(*FAIL)'
-%]
[% FOREACH item = dir.list -%]
   [% IF item.isdir %]
      [%- item.scan -%]
      [%- INCLUDE hdtgraph dir=item -%]
   [% ELSIF item.ext == 'hdt' AND item.name.match(nameFilter) %]
ja:namedGraph [
  ja:graphName <[% graphName %]?file=[% item.path %]>;
  ja:graph [
    a hdt:HDTGraph ;
    rdfs:label """Graph of dataset <[% graphName %]> from HDT file <[% item.path %]>""" ;
    hdt:fileName """[% item.path %]""" ;
    [%- IF item.name.match(keepInMemory_nameFilter) -%]
    [%-#
        # Optional: Keep the HDT and index in memory at all times.
        # Uses more memory but it is potentially faster because avoids IO.
    %]
    hdt:keepInMemory "true" ;
    [%- END %]
  ]
] ;
   [%- END -%]
[% END -%]
[% END %]
[%# }}} %]
[% # Modelines {{{
# Modeline for generated file.
'# vim'_': '_'fdm=marker ft=turtle'
-%]
[%#
# Modeline for template file
# vim: fdm=marker ft=tt2
%]
