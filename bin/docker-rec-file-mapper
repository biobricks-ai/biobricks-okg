#!/usr/bin/env perl

use strict;
use warnings;

use feature qw(signatures postderef);
no warnings qw(experimental::signatures experimental::postderef);
use File::Find;
use File::Basename qw(basename dirname);
use File::Spec;
use Cwd;
use JSON::PP qw(encode_json);

sub expand_link($path) {
	my %links;

	my $cwd = Cwd::cwd;
	while(1) {
		if( -l $path ) {
			my $to = readlink $path;
			# not taking into account .. in symlink for now
			warn "Not absolute: symlink from $path to $to", next unless File::Spec->file_name_is_absolute( $to );
			my $is_abs = File::Spec->file_name_is_absolute($path);
			$links{$is_abs ? $path : File::Spec->abs2rel($path, $cwd) } = $to;
			$path = $to;
		} else {
			$path = dirname($path);
		}

		last unless $path !~ m{\A(?:/|\.)\z}; # either / or .
	}
	\%links;
}

my %seen;
sub process_dir($dir) {
	my %results = ( files => [], links => {} );
	return \%results if $seen{$dir};
	$seen{$dir} = 1;
	find(
		{
			wanted => sub {
				push $results{files}->@*, $_ if -f;
				if( -l ) {
					my $expanded_links = expand_link( $_ );
					$results{links}->%* = (
						$results{links}->%*,
						$expanded_links->%*,
					);
				}
			},
			#follow   => 1,
			no_chdir => 1,
		},
		$dir,
	);

	\%results;
}

sub main {
	my $prefix = shift @ARGV;
	my %mapping;
	while ( my $dir = shift @ARGV) {
		print STDERR "Processing $dir\n";
		my $r = process_dir($dir);
		for my $from (keys $r->{links}->%*) {
			my $to = $r->{links}{$from};
			$mapping{$from} = 1;
			$mapping{$to} = 1;
		}
		for my $file ($r->{files}->@*) {
			$mapping{$file} = 1;
		}
	}

	my @volumes;
	my $prev = undef;
	for my $from (sort keys %mapping) {
		# subsumes previous path
		next if defined $prev && $from =~ m, \A \Q$prev\E / ,x;
		my $to = File::Spec->file_name_is_absolute( $from )
			? $from
			: File::Spec->catfile($prefix, $from);
		push @volumes, {
			type => 'bind',
			source => $from,
			target => $to,
			bind   => { create_host_path => \0 },
		};
		$prev = $from;
	}
	print encode_json(\@volumes);
}

main unless caller();
